{"version":3,"sources":["../src/index.js"],"names":["self","module","exports","localDb","activate","inkdrop","isMobile","backupPath","utilities","getBackupPath","plainTextPath","getPlainTextPath","main","dataStore","getLocalDB","getDataAndWriteAllNotes","writeMaps","dataMap","components","registerClass","ImportSidebar","layouts","insertComponentToLayoutAfter","layoutName","name","ImportModal","addComponentToLayout","onChange","change","typeOfChange","id","split","bookPath","books","doc","bookId","notePath","removeUnsupportedCharacters","title","noteAlreadyExists","fs","promises","access","ignore","unlink","notes","path","oldDataMap","getDataMap","rename","writeNote","body","basename","getBookPath","err","console","warn","onChangeErr","deactivate","dispose","deleteClass","removeComponentFromLayout"],"mappings":"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","sourcesContent":["import * as fs from \"fs\";\nimport ImportSidebar from \"./import_sidebar\";\nimport ImportModal from \"./import_modal\";\nimport utilities from \"./utilities\";\nimport * as path from \"path\";\n\nconst self = (module.exports = {\n    localDb: null,\n    async activate() {\n        if (inkdrop && !inkdrop.isMobile) {\n            const backupPath = utilities.getBackupPath();\n            if (backupPath) {\n                const plainTextPath = utilities.getPlainTextPath(backupPath);\n                self.localDb =\n                    self.localDb || inkdrop.main.dataStore.getLocalDB();\n                await utilities.getDataAndWriteAllNotes(\n                    self.localDb,\n                    plainTextPath\n                );\n                await utilities.writeMaps(plainTextPath, utilities.dataMap);\n\n                inkdrop.components.registerClass(ImportSidebar);\n                inkdrop.layouts.insertComponentToLayoutAfter(\n                    ImportSidebar.layoutName,\n                    \"SideBarMenuItemTrash\",\n                    ImportSidebar.name\n                );\n\n                inkdrop.components.registerClass(ImportModal);\n                inkdrop.layouts.addComponentToLayout(\n                    ImportModal.layoutName,\n                    ImportModal.name\n                );\n                try {\n                    // Sync stuff on changes:\n                    self.localDb.onChange(async (change) => {\n                        try {\n                            const typeOfChange = change.id.split(\":\")[0];\n                            switch (typeOfChange) {\n                                case \"note\":\n                                    const bookPath = `${plainTextPath}/${\n                                        utilities.dataMap.books[\n                                            change.doc.bookId\n                                        ]\n                                    }`;\n                                    const notePath = `${bookPath}/${utilities.removeUnsupportedCharacters(\n                                        change.doc.title\n                                    )}.md`;\n\n                                    let noteAlreadyExists = false;\n                                    try {\n                                        noteAlreadyExists =\n                                            await fs.promises.access(\n                                                `${plainTextPath}/${notePath}`\n                                            );\n                                    } catch (ignore) {}\n\n                                    // Delete moved or 'trashed' notes.\n                                    if (\n                                        (change.doc.bookId !==\n                                            utilities.dataMap.books[\n                                                change.doc.bookId\n                                            ] &&\n                                            noteAlreadyExists !== false) ||\n                                        change.doc.bookId === \"trash\"\n                                    ) {\n                                        await fs.promises.unlink(\n                                            `${plainTextPath}/${\n                                                utilities.dataMap.notes[\n                                                    change.id\n                                                ].path\n                                            }`\n                                        );\n                                    }\n                                    if (!utilities.dataMap.notes[change.id]) {\n                                        utilities.dataMap.notes[change.id] = {};\n                                    }\n                                    // If the title has changed, rename the old note.\n                                    if (change?.doc?.title) {\n                                        if (\n                                            utilities.dataMap.notes[change.id]\n                                                ?.title &&\n                                            change.doc.title !==\n                                                utilities.dataMap.notes[\n                                                    change.id\n                                                ].title\n                                        ) {\n                                            const oldDataMap =\n                                                await utilities.getDataMap(\n                                                    plainTextPath\n                                                );\n\n                                            await fs.promises.rename(\n                                                `${plainTextPath}/${\n                                                    oldDataMap.notes[change.id]\n                                                        .path\n                                                }`,\n                                                notePath\n                                            );\n                                        }\n\n                                        utilities.dataMap.notes[\n                                            change.id\n                                        ].title = change.doc.title;\n                                        utilities.dataMap.notes[\n                                            change.id\n                                        ].path = `${\n                                            utilities.dataMap.books[\n                                                change.doc.bookId\n                                            ]\n                                        }/${utilities.removeUnsupportedCharacters(\n                                            change.doc.title\n                                        )}.md`;\n\n                                        await utilities.writeNote(\n                                            `${plainTextPath}/${\n                                                utilities.dataMap.notes[\n                                                    change.id\n                                                ].path\n                                            }`,\n                                            change.doc.body\n                                        );\n                                        await utilities.writeMaps(\n                                            plainTextPath,\n                                            utilities.dataMap\n                                        );\n                                    }\n\n                                    break;\n                                case \"book\":\n                                    if (\n                                        utilities?.dataMap?.books[change.id] &&\n                                        utilities.removeUnsupportedCharacters(\n                                            change?.doc?.name\n                                        ) &&\n                                        change.doc.name !==\n                                            path.basename(\n                                                utilities.dataMap.books[\n                                                    change.id\n                                                ]\n                                            )\n                                    ) {\n                                        const oldDataMap =\n                                            await utilities.getDataMap(\n                                                plainTextPath\n                                            );\n\n                                        await fs.promises.rename(\n                                            `${plainTextPath}/${\n                                                oldDataMap.books[change.id]\n                                            }`,\n                                            `${plainTextPath}/${utilities.removeUnsupportedCharacters(\n                                                change.doc.name\n                                            )}`\n                                        );\n\n                                        let bookPath =\n                                            await utilities.getBookPath(\n                                                self.localDb,\n                                                change.doc\n                                            );\n\n                                        utilities.dataMap.books[change.id] =\n                                            bookPath;\n\n                                        await utilities.writeMaps(\n                                            plainTextPath,\n                                            utilities.dataMap\n                                        );\n                                    }\n                                    break;\n                            }\n                        } catch (err) {\n                            console.warn(\n                                \"Plain text backup may have had an issue:\",\n                                err\n                            );\n                        }\n                    });\n                } catch (onChangeErr) {\n                    console.warn(\"onChange event threw an error:\", onChangeErr);\n                }\n            }\n        }\n    },\n\n    deactivate() {\n        if (inkdrop && !inkdrop.isMobile) {\n            if (self.localDb) {\n                self.localDb.dispose();\n            }\n\n            inkdrop.components.deleteClass(ImportSidebar);\n            inkdrop.layouts.removeComponentFromLayout(\n                ImportSidebar.layoutName,\n                ImportSidebar.name\n            );\n\n            inkdrop.components.deleteClass(ImportModal);\n            layouts.removeComponentFromLayout(\"modal\", ImportModal.name);\n        }\n    },\n});\n"],"file":"index.js"}